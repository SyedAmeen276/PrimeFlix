{"version":3,"sources":["components/Header/Header.js","components/MainNav.js","components/Genres/Genres.js","config/config.js","components/SingleContent/SingleContent.js","hooks/useGenre.js","components/Pagination/CustomPagination.js","Pages/Movies/Movies.js","components/SeriesContent/SeriesContent.js","Pages/Series/Series.js","components/MovieThumb/MovieThumb.js","MoviesPlay.js","Pages/Trending/Trending.js","Pages/Search/Search.js","SeriesPlay.js","Tv.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","onClick","window","scroll","className","to","makeStyles","root","width","position","bottom","backgroundColor","zIndex","Genres","selectedGenres","setSelectedGenres","genres","setGenres","type","setPage","fetchGenres","a","axios","get","process","data","useEffect","style","padding","map","genre","Chip","margin","color","label","name","clickable","size","onDelete","filter","selected","id","handleRemove","g","handleAdd","img_300","unavailable","noPicture","BACKDROP_SIZE","IMAGE_BASE_URL","POSTER_SIZE","SingleContent","poster","title","date","media_type","vote_average","class","src","alt","paddingLeft","useGenre","length","reduce","acc","curr","darkTheme","createMuiTheme","palette","CustomPagination","numOfPages","display","justifyContent","marginTop","ThemeProvider","theme","Pagination","onChange","e","page","target","textContent","count","hideNextButton","hidePrevButton","Movies","useState","content","setContent","setNumOfPages","genreforURL","fetchMovies","results","total_pages","setTimeout","console","clear","c","poster_path","first_air_date","release_date","SeriesContent","id2","Series","fetchSeries","MovieThumb","props","image","TransitionsModal","credits","setCredits","similar","setSimilar","useParams","fetchData","fetchSimilar","fetchCredits","cast","items","profile_path","data-base-url","data-tmdb-id","height","scrolling","frameborder","allowFullScreen","webkitallowfullscreen","mozallowfullscreen","modestbranding","background","backdrop_path","original_title","overview","min","max","optimum","low","high","value","textTransform","paddingBottom","runtime","float","listStyle","paddingRight","mouseTracking","responsive","0","568","1024","controlsStrategy","autoPlay","infinite","disableButtonsControls","disableDotsControls","s","Trending","series","setSeries","fetchTrendingMovies","fetchTrendingSeries","Search","setType","searchText","setSearchText","primary","main","fetchSearch","error","TextField","flex","variant","Button","marginLeft","fontSize","Tabs","indicatorColor","textColor","event","newValue","aria-label","Tab","SeriesPlay","setData","num","seasons","setSeasons","episode","setEpisode","fetchDatas","i","cursor","season_number","air_date","split","episodes","episode_number","episode_run_time","Tv","require","App","path","component","exact","MoviesPlay","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uZAqBeA,EAlBA,WACb,OAEE,sBAAKC,QAAS,kBAAMC,OAAOC,OAAO,EAAG,IAAIC,UAAU,SAAnD,sBAGA,qBAAIA,UAAU,SAAd,UACA,qBAAIA,UAAU,UAAd,UAAwB,cAAC,IAAD,CAAMC,GAAG,IAAT,wBAAxB,OACA,oBAAID,UAAU,UAAd,SAAwB,cAAC,IAAD,CAAMC,GAAG,UAAT,wBACxB,qBAAID,UAAU,UAAd,UAAwB,cAAC,IAAD,CAAMC,GAAG,UAAT,yBAAxB,OACA,qBAAID,UAAU,UAAd,UAAwB,cAAC,IAAD,CAAMC,GAAG,UAAT,sBAAxB,c,sECHcC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,SAAU,QACVC,OAAQ,EACRC,gBAAiB,UACjBC,OAAQ,O,8DCuDGC,EAlEA,SAAC,GAOT,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,kBACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QAgBMC,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,IAAMC,IAAN,6CACiBL,EADjB,yBACsCM,mCADtC,oBADL,gBACVC,EADU,EACVA,KAGRR,EAAUQ,EAAKT,QAJG,2CAAH,qDAgBjB,OATAU,qBAAU,WAGR,OAFAN,IAEO,WACLH,EAAU,OAGX,IAGD,sBAAKU,MAAO,CAAEC,QAAS,SAAvB,UACGd,GAAkBA,EAAee,KAAI,SAACC,GAAD,OACpC,cAACC,EAAA,EAAD,CACEJ,MAAO,CAAEK,OAAQ,EAAEC,MAAO,UAC1BC,MAAOJ,EAAMK,KAEbF,MAAM,YACNG,WAAS,EACTC,KAAK,QACLC,SAAU,kBAlCG,SAACR,GACpBf,EACED,EAAeyB,QAAO,SAACC,GAAD,OAAcA,EAASC,KAAOX,EAAMW,OAE5DxB,EAAU,GAAD,mBAAKD,GAAL,CAAac,KACtBX,EAAQ,GA6BcuB,CAAaZ,KAJxBA,EAAMW,OAOdzB,GAAUA,EAAOa,KAAI,SAACC,GAAD,OACpB,cAACC,EAAA,EAAD,CACEJ,MAAO,CAAEK,OAAQ,EAAGC,MAAO,UAC3BC,MAAOJ,EAAMK,KAEbC,WAAS,EACTC,KAAK,QACLJ,MAAM,YACNhC,QAAS,kBAnDC,SAAC6B,GACjBf,EAAkB,GAAD,mBAAKD,GAAL,CAAqBgB,KACtCb,EAAUD,EAAOuB,QAAO,SAACI,GAAD,OAAOA,EAAEF,KAAOX,EAAMW,OAC9CtB,EAAQ,GAgDayB,CAAUd,KAJpBA,EAAMW,WC3DRI,EAAU,kCAKVC,EACX,wDAOWC,EACX,gEAEaC,EAAgB,QAChBC,EAAgB,6BAChBC,EAAc,OC6BdC,G,OAxCO,SAAC,GAOhB,IANLV,EAMI,EANJA,GACAW,EAKI,EALJA,OACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,WAEI,EADJC,aAKA,OACE,sBAAKC,MAAM,QAAQF,WAAYA,EAAYd,GAAIA,EAA/C,UAOA,cAAC,IAAD,CAAMpC,GAAI,WAAagD,EAAO,IAAIZ,EAAlC,SACE,qBACEA,GAAIA,EACJrC,UAAU,SACVsD,IAAKN,EAAM,UAAMP,GAAN,OAAgBO,GAAWN,EACtCa,IAAKN,MAOP,mBAAGjD,UAAU,QAAb,SAAsBiD,IACtB,uBAAMjD,UAAU,OAAhB,eAA0BmD,EAE1B,uBAAM5B,MAAO,CAACiC,YAAY,IAAK3B,MAAQ,OAAvC,cAAiDqB,aCnCxCO,EAPE,SAAC/C,GAChB,OAAIA,EAAegD,OAAS,EAAU,GAErBhD,EAAee,KAAI,SAACc,GAAD,OAAOA,EAAEF,MAC7BsB,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAM,IAAMC,M,2BCA9CC,EAAYC,YAAe,CAC/BC,QAAS,CACPlD,KAAM,UAIK,SAASmD,EAAT,GAAyD,IAA7BlD,EAA4B,EAA5BA,QAA4B,IAAnBmD,kBAAmB,MAAN,GAAM,EAOrE,OACE,qBACE3C,MAAO,CACLnB,MAAO,OACP+D,QAAS,OACTC,eAAgB,SAChBC,UAAW,IALf,SAQE,cAACC,EAAA,EAAD,CAAeC,MAAOT,EAAtB,SACE,cAACU,EAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAhBQC,EAgBgBD,EAAEE,OAAOC,YAfjD9D,EAAQ4D,QACR7E,OAAOC,OAAO,EAAG,GAFM,IAAC4E,GAiBlBG,MAAOZ,EACPrC,MAAM,UACNkD,gBAAc,EACdC,gBAAc,QCzBxB,IA2DeC,EA3DA,WACb,MAA4BC,mBAAS,IAArC,mBAAOtE,EAAP,KAAeC,EAAf,KACA,EAA4CqE,mBAAS,IAArD,mBAAOxE,EAAP,KAAuBC,EAAvB,KACA,EAAwBuE,mBAAS,GAAjC,mBAAOP,EAAP,KAAa5D,EAAb,KACA,EAA8BmE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,qBAApC,mBAAOhB,EAAP,KAAmBmB,EAAnB,KACMC,EAAc7B,EAAS/C,GAGvB6E,EAAW,uCAAG,8BAAAtE,EAAA,sEACKC,IAAMC,IAAN,8DACkCC,mCADlC,gGACuJuD,EADvJ,wBAC2KW,IAFhL,gBACVjE,EADU,EACVA,KAGR+D,EAAW/D,EAAKmE,SAChBH,EAAchE,EAAKoE,aALD,2CAAH,qDAkBjB,OATAnE,qBAAU,WACRxB,OAAOC,OAAO,EAAG,GACjBwF,IACAG,YAAW,WACTC,QAAQC,UACP,OAEF,CAACN,EAAaX,IAGf,gCACE,sBAAM3E,UAAU,YAAhB,6BACA,cAAC,EAAD,CACEc,KAAK,QACLJ,eAAgBA,EAChBC,kBAAmBA,EACnBC,OAAQA,EACRC,UAAWA,EACXE,QAASA,IAEX,qBAAKf,UAAU,WAAf,SACGmF,GACCA,EAAQ1D,KAAI,SAACoE,GAAD,OACV,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAAW,QACXC,aAAcyC,EAAEzC,cANXyC,EAAExD,SAUd6B,EAAa,GACZ,cAACD,EAAD,CAAkBlD,QAASA,EAASmD,WAAYA,QCZzC+B,G,OAxCO,SAAC,GAQhB,IAPL5D,EAOI,EAPJA,GAEAW,GAKI,EANJkD,IAMI,EALJlD,QACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,WAEI,EADJC,aAKA,OACE,sBAAKC,MAAM,QAAQF,WAAYA,EAAYd,GAAIA,EAA/C,UAOA,cAAC,IAAD,CAAMpC,GAAI,WAAagD,EAAO,IAAIZ,EAAlC,SACE,qBACErC,UAAU,SACVsD,IAAKN,EAAM,UAAMP,GAAN,OAAgBO,GAAWN,EACtCa,IAAKN,MAOP,mBAAGjD,UAAU,QAAb,SAAsBiD,IACtB,uBAAMjD,UAAU,OAAhB,eAA0BmD,EAE1B,uBAAM5B,MAAO,CAACiC,YAAY,IAAK3B,MAAQ,OAAvC,cAAiDqB,aCwBxCiD,EA1DA,WACb,MAA4BjB,mBAAS,IAArC,mBAAOtE,EAAP,KAAeC,EAAf,KACA,EAA4CqE,mBAAS,IAArD,mBAAOxE,EAAP,KAAuBC,EAAvB,KACA,EAAwBuE,mBAAS,GAAjC,mBAAOP,EAAP,KAAa5D,EAAb,KACA,EAA8BmE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,qBAApC,mBAAOhB,EAAP,KAAmBmB,EAAnB,KACMC,EAAc7B,EAAS/C,GAEvB0F,EAAW,uCAAG,8BAAAnF,EAAA,sEACKC,IAAMC,IAAN,2DAC+BC,mCAD/B,gGACoJuD,EADpJ,wBACwKW,IAF7K,gBACVjE,EADU,EACVA,KAGR+D,EAAW/D,EAAKmE,SAChBH,EAAchE,EAAKoE,aALD,2CAAH,qDAkBjB,OATAnE,qBAAU,WACRxB,OAAOC,OAAO,EAAG,GACjBqG,IACAV,YAAW,WACTC,QAAQC,UACP,OAEF,CAACN,EAAaX,IAGf,gCACE,sBAAM3E,UAAU,YAAhB,6BACA,cAAC,EAAD,CACEc,KAAK,KACLJ,eAAgBA,EAChBC,kBAAmBA,EACnBC,OAAQA,EACRC,UAAWA,EACXE,QAASA,IAEX,qBAAKf,UAAU,WAAf,SACGmF,GACCA,EAAQ1D,KAAI,SAACoE,GAAD,OACV,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAAW,SACXC,aAAcyC,EAAEzC,cANXyC,EAAExD,SAUd6B,EAAa,GACZ,cAACD,EAAD,CAAkBlD,QAASA,EAASmD,WAAYA,QCnCzCmC,G,cApBI,SAACC,GAChB,OACC,qBAAKtG,UAAU,kBAAf,UACCsG,EAAMtE,UAEA,qBAAKsB,IAAKgD,EAAMC,MAAOhD,IAAI,oB,8CCIxB,SAASiD,EAAiBF,GAGrC,MAA8BpB,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KACA,EAA8BxB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOyB,EAAP,KAAgBC,EAAhB,KACA,EAA0B1B,qBAA1B,mBACA,GADA,UACmB2B,eAANxE,GAAb,EAAOY,MAAP,EAAaZ,IAEPyE,EAAS,uCAAG,8BAAA7F,EAAA,sEACOC,IAAMC,IAAN,6CACiBkB,EADjB,oBAC+BjB,mCAD/B,oBADP,gBACRC,EADQ,EACRA,KAKR+D,EAAW/D,GANK,2CAAH,qDAWT0F,EAAY,uCAAG,8BAAA9F,EAAA,sEACIC,IAAMC,IAAN,6CACiBkB,EADjB,4BACuCjB,mCADvC,oBADJ,gBACXC,EADW,EACXA,KAINuF,EAAWvF,EAAKmE,SALC,2CAAH,qDAWdwB,EAAY,uCAAG,8BAAA/F,EAAA,sEACIC,IAAMC,IAAN,6CACiBkB,EADjB,4BACuCjB,mCADvC,oBADJ,gBACXC,EADW,EACXA,KAGRqF,EAAWrF,EAAK4F,MAJG,2CAAH,qDASZC,EAAQT,EAAQhF,KAAI,SAACoE,GAAD,OACxB,sBAAK7F,UAAU,WAAf,UACE,qBACEsD,IAAKuC,EAAEsB,aAAF,UAAoB1E,EAApB,YAA+BoD,EAAEsB,cAAiBxE,EACvDY,IAAG,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAG9D,KACR/B,UAAU,sBAEZ,mBAAGA,UAAU,qBAAb,gBAAmC6F,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAG9D,aAKxCT,qBAAU,WACRwF,IACAE,IACAD,IACAjH,OAAOC,OAAO,EAAG,GACjB2F,YAAW,WACTC,QAAQC,UACP,OAEF,CAACvD,IAUN,OACM,qCAQG,qBAAKgB,MAAM,uBAAuB+D,gBAAc,mCAClCC,eAAchF,EACdA,GAAG,eAFjB,SAIiB,wBAAQA,GAAG,eAAejC,MAAM,OAAOkH,OAAO,MAAMC,UAAU,KAAKC,YAAY,IACvElE,IAAK,6CAA6CjB,EAClDoF,gBAAgB,OAAOC,sBAAsB,OAC7CC,mBAAmB,OAAOC,eAAgB,QAKpE,qBAAK5H,UAAU,iBACnBuB,MAAO,CACLsG,WAAY1C,EAAQ2C,cAAR,eAAgCjF,GAAhC,OAAiDD,GAAjD,OAAiEuC,EAAQ2C,cAAzE,MAA6F,QAFvG,SAKF,sBAAK9H,UAAU,yBAAf,UACA,qBAAKA,UAAU,uBAAf,SACA,cAAC,EAAD,CACGuG,MAAOpB,EAAQW,YAAR,UAAyBjD,GAAzB,OAA0CC,GAA1C,OAAwDqC,EAAQW,aAAgB,wBACvF9D,WAAW,MAGd,sBAAKhC,UAAU,sBAAf,UACA,6BAAKmF,EAAQ4C,iBACb,sCACA,4BAAI5C,EAAQ6C,WACZ,6CACA,sBAAKhI,UAAU,cAAf,UACI,uBAAOiI,IAAI,IAAIC,IAAI,MAAMC,QAAQ,MAAMC,IAAI,KAAKC,KAAK,KAAKC,MAA8B,GAAvBnD,EAAQ/B,eAC7E,mBAAGpD,UAAU,aAAb,SAA2BmF,EAAQ/B,kBAErC,qBAAI7B,MAAO,CAACgH,cAAe,aAAcC,cAAe,QAAxD,8BAAkF,qCAAQrD,EAAQsD,QAAhB,aAClF,qBAAIlH,MAAO,CAACgH,cAAe,aAAcC,cAAe,QAAxD,4BAAgF,qCAAQrD,EAAQa,aAAhB,UAChF,wCACCb,EAAQvE,QAAUuE,EAAQvE,OAAOa,KAAI,SAACoE,GAAD,OACpC,qBAAItE,MAAO,CAACmH,MAAO,OAAQC,UAAW,QAASC,aAAc,OAAO/G,MAAO,SAA3E,cAAuFgE,EAAE9D,mBASzF,qBAAK/B,UAAU,OAAf,SACE,cAAC,IAAD,CACA6I,eAAa,EACb3B,MAAOA,EACP4B,WAnEa,CACjBC,EAAG,CAAE7B,MAAO,GACZ8B,IAAK,CAAE9B,MAAO,GACd+B,KAAM,CAAE/B,MAAO,IAiEXgC,iBAAiB,YACnBC,UAAQ,EACRC,UAAQ,EACNC,wBAAsB,EACtBC,qBAAmB,MAIrB,gCACA,sBAAMtJ,UAAU,UAAhB,6BACA,qBAAKA,UAAU,WAAf,SACC2G,GAAYA,EAAQlF,KAAI,SAAC8H,GAAD,OACrB,cAAC,EAAD,CAEElH,GAAIkH,EAAElH,GACNW,OAAQuG,EAAEzD,YACV7C,MAAOsG,EAAEtG,OAASsG,EAAExH,KACpBmB,KAAMqG,EAAExD,gBAAkBwD,EAAEvD,aAC5B7C,WAAY,QACZC,aAAcmG,EAAEnG,cANXmG,EAAElH,eCtJrB,IA2EemH,EA3EE,WACf,MAAwBtE,mBAAS,GAAjC,mBAAOP,EAAP,KAAa5D,EAAb,KACA,EAA8BmE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOuE,EAAP,KAAeC,EAAf,KAEMC,EAAmB,uCAAG,8BAAA1I,EAAA,sEACHC,IAAMC,IAAN,kEACsCC,mCADtC,iBAC4EuD,IAFzE,gBAClBtD,EADkB,EAClBA,KAIR+D,EAAW/D,EAAKmE,SALU,2CAAH,qDASnBoE,EAAmB,uCAAG,8BAAA3I,EAAA,sEACHC,IAAMC,IAAN,+DACmCC,mCADnC,iBACyEuD,IAFtE,gBAClBtD,EADkB,EAClBA,KAIRqI,EAAUrI,EAAKmE,SALW,2CAAH,qDAoBzB,OAXAlE,qBAAU,WACRxB,OAAOC,OAAO,EAAG,GACjB4J,IACAC,IACAlE,YAAW,WACTC,QAAQC,UACP,OAEF,CAACjB,IAIF,gCACE,sBAAM3E,UAAU,YAAhB,6BACA,qBAAKA,UAAU,WAAf,SACGmF,GACCA,EAAQ1D,KAAI,SAACoE,GAAD,OAEV,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAA2B,UAAf0C,EAAE1C,WAAsB,SAAS,SAC7CC,aAAcyC,EAAEzC,cANXyC,EAAExD,SAWf,sBAAMrC,UAAU,aAAhB,6BACA,qBAAKA,UAAU,WAAf,SACGyJ,GACCA,EAAOhI,KAAI,SAACoE,GAAD,OAET,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAA2B,UAAf0C,EAAE1C,WAAsB,SAAS,SAC7CC,aAAcyC,EAAEzC,cANXyC,EAAExD,SAWf,cAAC4B,EAAD,CAAkBlD,QAASA,Q,oCCsElB8I,G,OAnIA,WACb,MAAwB3E,mBAAS,GAAjC,mBAAOpE,EAAP,KAAagJ,EAAb,KACA,EAAoC5E,mBAAS,IAA7C,mBAAO6E,EAAP,KAAmBC,EAAnB,KACA,EAAwB9E,mBAAS,GAAjC,mBAAOP,EAAP,KAAa5D,EAAb,KACA,EAA8BmE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBACA,GADA,UACoCA,sBAApC,mBAAOhB,EAAP,KAAmBmB,EAAnB,KAEMvB,EAAYC,YAAe,CAC/BC,QAAS,CACPlD,KAAM,OACNmJ,QAAS,CACPC,KAAM,WAKNC,EAAW,uCAAG,8BAAAlJ,EAAA,+EAEOC,IAAMC,IAAN,8CACkBL,EAAO,KAAO,QADhC,oBAEnBM,mCAFmB,iCAGI2I,EAHJ,iBAGuBpF,EAHvB,yBAFP,gBAERtD,EAFQ,EAERA,KAKR+D,EAAW/D,EAAKmE,SAChBH,EAAchE,EAAKoE,aARH,gDAWhBE,QAAQyE,MAAR,MAXgB,yDAAH,qDAyCjB,OAVA9I,qBAAU,WACRxB,OAAOC,OAAO,EAAG,GACjBoK,IACAzE,YAAW,WACTC,QAAQC,UACP,OAGF,CAAC9E,EAAM6D,IAGR,gCACE,eAACL,EAAA,EAAD,CAAeC,MAAOT,EAAtB,UACE,sBAAK9D,UAAU,SAAf,UACE,cAACqK,EAAA,EAAD,CACE9I,MAAO,CAAE+I,KAAM,GACftK,UAAU,YACV8B,MAAM,SACNyI,QAAQ,SACR9F,SAAU,SAACC,GAAD,OAAOsF,EAActF,EAAEE,OAAO0D,UAE1C,cAACkC,EAAA,EAAD,CACE3K,QAASsK,EACTI,QAAQ,YACRhJ,MAAO,CAAEkJ,WAAY,IAHvB,SAKE,cAAC,IAAD,CAAYC,SAAS,eAGzB,eAACC,EAAA,EAAD,CACErC,MAAOxH,EACP8J,eAAe,UACfC,UAAU,UACVpG,SAAU,SAACqG,EAAOC,GAChBjB,EAAQiB,GACRhK,EAAQ,IAEVQ,MAAO,CAAEiH,cAAe,GACxBwC,aAAW,wBATb,UAWE,cAACC,EAAA,EAAD,CAAK1J,MAAO,CAAEnB,MAAO,QAAU0B,MAAM,kBACrC,cAACmJ,EAAA,EAAD,CAAK1J,MAAO,CAAEnB,MAAO,QAAU0B,MAAM,2BAGzC,sBAAK9B,UAAU,WAAf,UACQ,GAAPc,EACEqE,GACCA,EAAQ1D,KAAI,SAACoE,GAAD,OACV,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAAYrC,EAAO,KAAO,QAC1BsC,aAAcyC,EAAEzC,cANXyC,EAAExD,OAQL8C,GACNA,EAAQ1D,KAAI,SAACoE,GAAD,OAEV,cAAC,EAAD,CAEExD,GAAIwD,EAAExD,GACNW,OAAQ6C,EAAEC,YACV7C,MAAO4C,EAAE5C,OAAS4C,EAAE9D,KACpBmB,KAAM2C,EAAEE,gBAAkBF,EAAEG,aAC5B7C,WAA2B,UAAf0C,EAAE1C,WAAsB,SAAS,SAC7CC,aAAcyC,EAAEzC,cANXyC,EAAExD,OAWZ0H,IACE5E,IACArE,EAAO,iDAA2B,qDAEtCoD,EAAa,GACZ,cAACD,EAAD,CAAkBlD,QAASA,EAASmD,WAAYA,SC8EzCgH,G,OA/MI,WAEf,MAA8BhG,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KAEA,EAAwBxB,mBAAS,IAAjC,mBAAO7D,EAAP,KAAa8J,EAAb,KACA,EAAsBjG,mBAAS,IAA/B,mBAAOkG,EAAP,KACA,GADA,KACwBvE,eAAVxE,GAAd,EAAOY,MAAP,EAAcZ,IACd,GADA,EAAiB6D,IACahB,mBAAS,IAAvC,mBAAOmG,EAAP,KAAgBC,EAAhB,KACA,EAA8BpG,mBAAS,GAAvC,mBAAOqG,EAAP,KAAgBC,EAAhB,KACA,EAA8BtG,mBAAS,IAAvC,mBAAOyB,EAAP,KAAgBC,EAAhB,KAIME,EAAS,uCAAG,8BAAA7F,EAAA,sEACSC,IAAMC,IAAN,0CACckB,EADd,oBAC4BjB,mCAD5B,iCADT,gBACNC,EADM,EACNA,KAKR+D,EAAW/D,GANG,2CAAH,qDAUPoK,EAAU,uCAAG,8BAAAxK,EAAA,sEACMC,IAAMC,IAAN,sDAEakB,EAFb,mBAE0BgJ,EAF1B,8CADN,gBACThK,EADS,EACTA,KAMR8J,EAAQ9J,GAPS,2CAAH,qDAWV0F,EAAY,uCAAG,8BAAA9F,EAAA,sEACIC,IAAMC,IAAN,0CACckB,EADd,4BACoCjB,mCADpC,oBADJ,gBACXC,EADW,EACXA,KAINuF,EAAWvF,EAAKmE,SALC,2CAAH,qDASZwB,EAAY,uCAAG,8BAAA/F,EAAA,sEACIC,IAAMC,IAAN,0CACckB,EADd,4BACoCjB,mCADpC,oBADJ,gBACXC,EADW,EACXA,KAGRqF,EAAWrF,EAAK4F,MAJG,2CAAH,qDAQZC,EAAQT,EAAQhF,KAAI,SAACoE,GAAD,OACxB,sBAAK7F,UAAU,WAAf,UACE,qBACEsD,IAAKuC,EAAEsB,aAAF,UAAoB1E,EAApB,YAA+BoD,EAAEsB,cAAiBxE,EACvDY,IAAG,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAG9D,KACR/B,UAAU,sBAEZ,mBAAGA,UAAU,qBAAb,gBAAmC6F,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAG9D,aAI1CT,qBAAU,WACRwF,IACA2E,IACA3L,OAAOC,OAAO,EAAG,GACjBgH,IACAC,IACAtB,YAAW,WACTC,QAAQC,UACP,OAGF,CAACyF,EAAQD,IAQd,OACI,qCAUY,qBAAK/H,MAAM,uBAAuB+D,gBAAc,mCAC3CC,eAAchF,EACdA,GAAG,eAFR,SAIQ,wBAAQA,GAAG,eAAejC,MAAM,OAAOkH,OAAO,MAAMC,UAAU,KAAKC,YAAY,IACvElE,IAAK,0CAA0CjB,EAAI,MAAOgJ,EAAS,MAAOE,EAC1E9D,gBAAgB,OAAOC,sBAAsB,OAC7CC,mBAAmB,WAW/C,sBAAK3H,UAAU,QAAf,UACG,oBAAIuB,MAAO,CAACM,MAAM,SAAlB,qBACAsD,EAAQkG,SAAclG,EAAQkG,QAAQ5J,KAAI,SAAC8H,EAAEmC,GAAH,OAC3C,mCACI,GAAHA,EAAO,oBAAG1L,UAAU,UAAUuB,MAAO,CAAC4C,QAAS,cAAewH,OAAQ,UAAWnK,QAAQ,QAAgC3B,QAAS,WAAOyL,EAAW/B,EAAEqC,eACtJJ,EAAW,IADJ,UACWjC,EAAExH,KADb,MACsBwH,EAAEsC,UAAYtC,EAAEsC,SAASC,MAAM,KAAK,KADuCvC,EAAEqC,eAChC,SAO7E,oBAAIrK,MAAO,CAACM,MAAM,SAAlB,sBACER,EAAK0K,UAAY1K,EAAK0K,SAAStK,KAAI,SAACiD,GAAD,OAChC,oBAAG1E,UAAU,gBAAgBuB,MAAO,CAAEoK,OAAQ,WAAoC9L,QAAS,kBAAM2L,EAAW9G,EAAEsH,iBAA9G,UAAgI,sBAAMzK,MAAO,CAACM,MAAQ,SAAtB,SAAiC6C,EAAEsH,iBAAnK,IAA2LtH,EAAE3C,OAA7H2C,EAAEsH,sBAMpE,qBAAKhM,UAAU,iBACpBuB,MAAO,CACLsG,WAAY1C,EAAQ2C,cAAR,eAAgCjF,GAAhC,OAAiDD,GAAjD,OAAiEuC,EAAQ2C,cAAzE,MAA6F,QAFtG,SAKH,sBAAK9H,UAAU,yBAAf,UACA,qBAAKA,UAAU,uBAAf,SACA,cAAC,EAAD,CACGuG,MAAOpB,EAAQW,YAAR,UAAyBjD,GAAzB,OAA0CC,GAA1C,OAAwDqC,EAAQW,aAAgB,wBACvF9D,WAAW,MAGd,sBAAKhC,UAAU,sBAAf,UACA,oBAAIuB,MAAO,CAACM,MAAO,aAAnB,SAAkCsD,EAAQpD,OAC1C,oBAAIR,MAAO,CAACM,MAAO,gBAAnB,kBACA,mBAAGN,MAAO,CAACM,MAAO,YAAlB,SAAgCsD,EAAQ6C,WACxC,oBAAIzG,MAAO,CAACM,MAAO,gBAAnB,yBACA,sBAAK7B,UAAU,cAAf,UACI,uBAAOiI,IAAI,IAAIC,IAAI,MAAMC,QAAQ,MAAMC,IAAI,KAAKC,KAAK,KAAKC,MAA8B,GAAvBnD,EAAQ/B,eAC7E,mBAAGpD,UAAU,aAAb,SAA2BmF,EAAQ/B,kBAErC,qBAAI7B,MAAO,CAACgH,cAAe,YAAaC,cAAe,OAAO3G,MAAO,gBAArE,8BAAuG,uBAAMN,MAAO,CAACM,MAAO,YAArB,cAAoCsD,EAAQ8G,iBAA5C,aACvG,oBAAI1K,MAAO,CAACM,MAAO,gBAAnB,oBACCsD,EAAQvE,QAAUuE,EAAQvE,OAAOa,KAAI,SAACoE,GAAD,OACpC,qBAAItE,MAAO,CAACmH,MAAO,OAAQC,UAAW,QAASC,aAAc,OAAO/G,MAAO,SAA3E,cAAuFgE,EAAE9D,mBAiB7F,qBAAK/B,UAAU,OAAf,SACM,cAAC,IAAD,CACA6I,eAAa,EACb3B,MAAOA,EACP4B,WArGe,CACjBC,EAAG,CAAE7B,MAAO,GACZ8B,IAAK,CAAE9B,MAAO,GACd+B,KAAM,CAAE/B,MAAO,IAmGbgC,iBAAiB,YACnBC,UAAQ,EACRC,UAAQ,EACNC,wBAAsB,EACtBC,qBAAmB,MAIpB,sBAAMtJ,UAAU,UAAhB,6BACD,qBAAKA,UAAU,WAAf,SACC2G,GAAYA,EAAQlF,KAAI,SAAC8H,GAAD,OACrB,cAAC,EAAD,CAEElH,GAAIkH,EAAElH,GACNW,OAAQuG,EAAEzD,YACV7C,MAAOsG,EAAEtG,OAASsG,EAAExH,KACpBmB,KAAMqG,EAAExD,gBAAkBwD,EAAEvD,aAC5B7C,WAA2B,UAAfoG,EAAEpG,WAAsB,SAAS,SAC7CC,aAAcmG,EAAEnG,cANXmG,EAAElH,cCtKN6J,EAlCJ,WACIC,EAAQ,IAARA,CAAmB,oCA2B9B,OACI,8BCQOC,MAxBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,qBAAKpM,UAAU,MAAf,SAEI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqM,KAAK,IAAIC,UAAW9C,EAAU+C,OAAK,IAC1C,cAAC,IAAD,CAAOA,OAAK,EAACF,KAAK,qBAAqBC,UAAWE,IAClD,cAAC,IAAD,CAAOH,KAAK,UAAUC,UAAWrH,IACjC,cAAC,IAAD,CAAOsH,OAAK,EAACF,KAAK,qBAAqBC,UAAWpB,IAClD,cAAC,IAAD,CAAOmB,KAAK,UAAUC,UAAWnG,IACjC,cAAC,IAAD,CAAOkG,KAAK,UAAUC,UAAWzC,IACjC,cAAC,IAAD,CAAOwC,KAAK,MAAMC,UAAWJ,aChBnCO,EAAcC,QACW,cAA7B5M,OAAO6M,SAASC,UAEe,UAA7B9M,OAAO6M,SAASC,UAEhB9M,OAAO6M,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BhI,QAAQiI,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlB1H,QAAQiI,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAC3D,GACNzE,QAAQyE,MAAM,4CAA6CA,MC1FjE4D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIhN,aAAwBtB,OAAO6M,SAAS0B,MACpDC,SAAWxO,OAAO6M,SAAS2B,OAIvC,OAGFxO,OAAOyO,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAM3L,aAAN,sBAEPqL,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAACsB,GAEL,IAAMC,EAAcD,EAASD,QAAQtN,IAAI,gBAEnB,MAApBuN,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAACC,GAClCA,EAAa0B,aAAa3B,MAAK,WAC7BtN,OAAO6M,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLpI,QAAQiI,IACN,oEAvFAqB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCzH,QAAQiI,IACN,+GAMJd,EAAgBC,EAAOC,OC1C/BkC,K","file":"static/js/main.d24549e4.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  return (\n   \n    <div onClick={() => window.scroll(0, 0)} className=\"header\">\n     PrimeFlix\n    \n    <ul className=\"Navbar\">\n    <li className=\"navItem\"><Link to=\"/\"> Trending </Link> </li>\n    <li className=\"navItem\"><Link to=\"/movies\"> Movies </Link></li>\n    <li className=\"navItem\"><Link to=\"/series\"> Tv Series </Link> </li>\n    <li className=\"navItem\"><Link to=\"/Search\"> search </Link> </li>\n\n    </ul>\n    </div>\n    \n  );\n};\n\nexport default Header;\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport TvIcon from \"@material-ui/icons/Tv\";\nimport MovieIcon from \"@material-ui/icons/Movie\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    position: \"fixed\",\n    bottom: 0,\n    backgroundColor: \"#2d313a\",\n    zIndex: 100,\n  },\n});\n\nexport default function SimpleBottomNavigation() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (value === 0) {\n      history.push(\"/\");\n    } else if (value === 1) {\n      history.push(\"/movies\");\n    } else if (value === 2) {\n      history.push(\"/series\");\n    } else if (value === 3) {\n      history.push(\"/search\");\n    }\n  }, [value, history]);\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n      }}\n      showLabels\n      className={classes.root}\n    >\n      <BottomNavigationAction\n        style={{ color: \"white\" }}\n        label=\"Trending\"\n        icon={<WhatshotIcon />}\n      />\n      <BottomNavigationAction\n        style={{ color: \"white\" }}\n        label=\"Movies\"\n        icon={<MovieIcon />}\n      />\n      <BottomNavigationAction\n        style={{ color: \"white\" }}\n        label=\"TV Series\"\n        icon={<TvIcon />}\n      />\n      <BottomNavigationAction\n        style={{ color: \"white\" }}\n        label=\"Search\"\n        icon={<SearchIcon />}\n      />\n    </BottomNavigation>\n  );\n}\n","import { Chip } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\n\n\nconst Genres = ({\n  selectedGenres,\n  setSelectedGenres,\n  genres,\n  setGenres,\n  type,\n  setPage,\n}) => {\n  const handleAdd = (genre) => {\n    setSelectedGenres([...selectedGenres, genre]);\n    setGenres(genres.filter((g) => g.id !== genre.id));\n    setPage(1);\n  };\n\n  const handleRemove = (genre) => {\n    setSelectedGenres(\n      selectedGenres.filter((selected) => selected.id !== genre.id)\n    );\n    setGenres([...genres, genre]);\n    setPage(1);\n  };\n\n  const fetchGenres = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/genre/${type}/list?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\n    );\n    setGenres(data.genres);\n  };\n\n  useEffect(() => {\n    fetchGenres();\n\n    return () => {\n      setGenres({}); // unmounting\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div style={{ padding: \"6px 0\" }}>\n      {selectedGenres && selectedGenres.map((genre) => (\n        <Chip\n          style={{ margin: 2,color: \"purple\" }}\n          label={genre.name}\n          key={genre.id}\n          color=\"secondary\"\n          clickable\n          size=\"small\"\n          onDelete={() => handleRemove(genre)}\n        />\n      ))}\n      {genres && genres.map((genre) => (\n        <Chip\n          style={{ margin: 2 ,color: \"purple\"}}\n          label={genre.name}\n          key={genre.id}\n          clickable\n          size=\"large\"\n          color=\"secondary\"\n          onClick={() => handleAdd(genre)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Genres;\n","//image sizes for tmdb\nexport const img_300 = \"https://image.tmdb.org/t/p/w300\";\nexport const img_500 = \"https://image.tmdb.org/t/p/w500\";\nexport const img = \"https://image.tmdb.org/t/p/original\";\n\n// contentModal and singleContent\nexport const unavailable =\n  \"https://www.movienewz.com/img/films/poster-holder.jpg\";\n\n// contentModal\nexport const unavailableLandscape =\n  \"https://user-images.githubusercontent.com/10515204/56117400-9a911800-5f85-11e9-878b-3f998609a6c8.jpg\";\n\n// For Carousel\nexport const noPicture =\n  \"https://upload.wikimedia.org/wikipedia/en/6/60/No_Picture.jpg\";\n\n  export const BACKDROP_SIZE = 'w1280';\n  export const IMAGE_BASE_URL ='http://image.tmdb.org/t/p/';\n  export const POSTER_SIZE = 'w500';","import {Link} from \"react-router-dom\";\nimport { img_300, unavailable } from \"../../config/config\";\nimport \"./SingleContent.css\";\nimport { Badge } from \"@material-ui/core\";\n\n\n\n\nconst SingleContent = ({\n  id,\n  poster,\n  title,\n  date,\n  media_type,\n  vote_average,\n}) => {\n  \n \n\n  return (\n    <div class=\"media\" media_type={media_type} id={id}>\n    {/* <Badge\n    className=\"badge\"\n      badgeContent={vote_average}\n      color=\"secondary\"\n    /> */}\n    \n    <Link to={'/movies/' + title+ '/'+id} >\n      <img\n        id={id}\n        className=\"poster\"\n        src={poster ? `${img_300}${poster}` : unavailable}\n        alt={title}\n      />\n      </Link>  \n\n    \n      \n\n      <b className=\"title\">{title}</b>\n      <span className=\"type\">  {media_type}\n       \n      <span style={{paddingLeft:125, color : \"Red\"}}> {date}</span>\n      </span>\n    </div>\n  );\n};\n\nexport default SingleContent;\n","const useGenre = (selectedGenres) => {\n  if (selectedGenres.length < 1) return \"\";\n\n  const GenreIds = selectedGenres.map((g) => g.id);\n  return GenreIds.reduce((acc, curr) => acc + \",\" + curr);\n};\n\nexport default useGenre;\n","import React from \"react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nexport default function CustomPagination({ setPage, numOfPages = 10 }) {\n  // Scroll to top when page changes\n  const handlePageChange = (page) => {\n    setPage(page);\n    window.scroll(0, 0);\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: 10,\n      }}\n    >\n      <ThemeProvider theme={darkTheme}>\n        <Pagination\n          onChange={(e) => handlePageChange(e.target.textContent)}\n          count={numOfPages}\n          color=\"primary\"\n          hideNextButton\n          hidePrevButton\n        />\n      </ThemeProvider>\n    </div>\n  );\n}\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Genres from \"../../components/Genres/Genres\";\nimport SingleContent from \"../../components/SingleContent/SingleContent\";\nimport useGenre from \"../../hooks/useGenre\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\n\nconst Movies = () => {\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [numOfPages, setNumOfPages] = useState();\n  const genreforURL = useGenre(selectedGenres);\n  // console.log(selectedGenres);\n\n  const fetchMovies = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreforURL}`\n    );\n    setContent(data.results);\n    setNumOfPages(data.total_pages);\n    // console.log(data);\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchMovies();\n    setTimeout(() => {\n      console.clear();\n    }, 3000);\n    // eslint-disable-next-line\n  }, [genreforURL, page]);\n\n  return (\n    <div>\n      <span className=\"pageTitle\">Discover Movies</span>\n      <Genres\n        type=\"movie\"\n        selectedGenres={selectedGenres}\n        setSelectedGenres={setSelectedGenres}\n        genres={genres}\n        setGenres={setGenres}\n        setPage={setPage}\n      />\n      <div className=\"trending\">\n        {content &&\n          content.map((c) => (\n            <SingleContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type=\"movie\"\n              vote_average={c.vote_average}\n            />\n          ))}\n      </div>\n      {numOfPages > 1 && (\n        <CustomPagination setPage={setPage} numOfPages={numOfPages} />\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import {Link} from \"react-router-dom\";\r\nimport { img_300, unavailable } from \"../../config/config\";\r\nimport \"./SeriesContent.css\";\r\nimport { Badge } from \"@material-ui/core\";\r\n\r\n\r\n\r\n\r\nconst SeriesContent = ({\r\n  id,\r\n  id2,\r\n  poster,\r\n  title,\r\n  date,\r\n  media_type,\r\n  vote_average,\r\n}) => {\r\n  \r\n \r\n\r\n  return (\r\n    <div class=\"media\" media_type={media_type} id={id} >\r\n    {/* <Badge\r\n    className=\"badge\"\r\n      badgeContent={vote_average}\r\n      color=\"secondary\"\r\n    /> */}\r\n    \r\n    <Link to={'/series/' + title+ '/'+id } >\r\n      <img\r\n        className=\"poster\"\r\n        src={poster ? `${img_300}${poster}` : unavailable}\r\n        alt={title}\r\n      />\r\n      </Link>  \r\n\r\n    \r\n      \r\n\r\n      <b className=\"title\">{title}</b>\r\n      <span className=\"type\">  {media_type}\r\n       \r\n      <span style={{paddingLeft:125, color : \"Red\"}}> {date}</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeriesContent;\r\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Genres from \"../../components/Genres/Genres\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\n\nimport SingleContent from \"../../components/SeriesContent/SeriesContent\";\nimport useGenre from \"../../hooks/useGenre\";\n\nconst Series = () => {\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [numOfPages, setNumOfPages] = useState();\n  const genreforURL = useGenre(selectedGenres);\n\n  const fetchSeries = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreforURL}`\n    );\n    setContent(data.results);\n    setNumOfPages(data.total_pages);\n    //  console.log(data);\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchSeries();\n    setTimeout(() => {\n      console.clear();\n    }, 3000);\n    // eslint-disable-next-line\n  }, [genreforURL, page]);\n\n  return (\n    <div>\n      <span className=\"pageTitle\">Discover Series</span>\n      <Genres\n        type=\"tv\"\n        selectedGenres={selectedGenres}\n        setSelectedGenres={setSelectedGenres}\n        genres={genres}\n        setGenres={setGenres}\n        setPage={setPage}\n      />\n      <div className=\"trending\">\n        {content &&\n          content.map((c) => (\n            <SingleContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type=\"Series\"\n              vote_average={c.vote_average}\n            />\n          ))}\n      </div>\n      {numOfPages > 1 && (\n        <CustomPagination setPage={setPage} numOfPages={numOfPages} />\n      )}\n    </div>\n  );\n};\n\nexport default Series;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './MovieThumb.css';\r\n\r\nconst MovieThumb = (props) => {\r\n    return (\r\n     <div className=\"rmdb-moviethumb\">\r\n     {props.clickable ?\r\n     \r\n            <img src={props.image} alt=\"moviethumb\" />\r\n        \r\n         :\r\n         <img src={props.image} alt=\"moviethumb\" />  \r\n     }\r\n     </div>\r\n    )\r\n}\r\n\r\nMovieThumb.propTypes = {\r\nimage:  PropTypes.string,\r\nmovieId: PropTypes.number,\r\nmovieName: PropTypes.string\r\n}\r\n\r\nexport default MovieThumb;","import axios from \"axios\";\r\nimport { useParams } from \"react-router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport MovieThumb from \"./components/MovieThumb/MovieThumb\"\r\nimport \"./MoviePlay.css\";\r\nimport { IMAGE_BASE_URL,BACKDROP_SIZE,POSTER_SIZE,img_300,noPicture } from \"./config/config\";\r\nimport AliceCarousel from \"react-alice-carousel\";\r\nimport \"react-alice-carousel/lib/alice-carousel.css\";\r\nimport SingleContent from \"./components/SingleContent/SingleContent\"\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactHlsPlayer from 'react-hls-player';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport ReactPlayer from 'react-player'\r\n\r\nexport default function TransitionsModal(props) {\r\n    // console.log(media_type);\r\n    // console.log(id);\r\n    const [credits, setCredits] = useState([]);\r\n    const [content, setContent] = useState({});\r\n    const [similar, setSimilar] = useState([]);\r\n    const [movie, setMovie] = useState();\r\n    const {title,id} = useParams()\r\n      \r\n    const fetchData = async () => {\r\n      const { data } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n      );\r\n   \r\n  \r\n      setContent(data);\r\n        // console.log(data);\r\n    \r\n    };\r\n\r\n    const fetchSimilar = async () => {\r\n      const { data } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${id}/similar?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n      );\r\n  \r\n        setSimilar(data.results);\r\n        // console.log(data);\r\n    \r\n    };\r\n\r\n    \r\n  const fetchCredits = async () => {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n    );\r\n    setCredits(data.cast);\r\n    // console.log(data)\r\n  };\r\n\r\n\r\n  const items = credits.map((c) => (\r\n    <div className=\"carousel\">\r\n      <img\r\n        src={c.profile_path ? `${img_300}/${c.profile_path}` : noPicture}\r\n        alt={c?.name}\r\n        className=\"carouselItem__img\"\r\n      />\r\n      <p className=\"carouselItem__name\">{c?.name}</p>\r\n    </div>\r\n  ));\r\n\r\n\r\n    useEffect(() => {\r\n      fetchData();\r\n      fetchCredits();\r\n      fetchSimilar();\r\n      window.scroll(0, 0);\r\n      setTimeout(() => {\r\n        console.clear();\r\n      }, 3000);\r\n   \r\n    }, [id]);\r\n\r\n    const responsive = {\r\n      0: { items: 3 },\r\n      568: { items: 4 },\r\n      1024: { items: 8 },\r\n  };\r\n    \r\n\r\n\r\n  return(\r\n        <>\r\n          \r\n           {/* <div className=\"player\">\r\n           <iframe class=\"iframe-embed\" width=\"100%\" height=\"700\" scrolling=\"no\" frameborder=\"0\"\r\n  src={\"https://www.2embed.ru/embed/tmdb/movie?id=\"+id}\r\n  allowFullScreen=\"true\" webkitallowfullscreen=\"true\"\r\n  mozallowfullscreen=\"true\"></iframe>\r\n           </div> */}\r\n           <div class=\"watching_player-area\" data-base-url=\"https://www.2embed.ru/embed/tmdb\"\r\n                         data-tmdb-id={id}\r\n                         id=\"watch-iframe\">\r\n                        \r\n                            <iframe id=\"iframe-embed\" width=\"100%\" height=\"800\" scrolling=\"no\" frameborder=\"0\"\r\n                                    src={\"https://www.2embed.ru/embed/tmdb/movie?id=\"+id}\r\n                                    allowFullScreen=\"true\" webkitallowfullscreen=\"true\"\r\n                                    mozallowfullscreen=\"true\" modestbranding= \"1\"></iframe>\r\n                         {/* <a href={\"https://www.2embed.ru/embed/tmdb/movie?id=\"+id} download><CloudDownloadIcon/></a>            */}\r\n                        \r\n                    </div>\r\n         \r\n          <div className=\"rmdb-movieinfo\"\r\n      style={{\r\n        background: content.backdrop_path ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${content.backdrop_path}')` : '#000'\r\n      }}\r\n      >\r\n        <div className=\"rmdb-movieinfo-content\">\r\n        <div className=\"rmdb-movieinfo-thumb\">\r\n        <MovieThumb\r\n           image={content.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${content.poster_path}` : './images/no_image.jpg'}\r\n           clickable={false}\r\n           />\r\n        </div>\r\n        <div className=\"rmdb-movieinfo-text\">\r\n        <h1>{content.original_title}</h1>\r\n        <h3>PLOT</h3>\r\n        <p>{content.overview}</p>\r\n        <h3>IMDB RATING</h3>\r\n        <div className=\"rmdb-rating\">\r\n            <meter min=\"0\" max=\"100\" optimum=\"100\" low=\"40\" high=\"70\" value={content.vote_average * 10}></meter>\r\n        <p className=\"rmdb-score\">{content.vote_average}</p>\r\n      </div>\r\n      <h3 style={{textTransform: \"Capitalize\", paddingBottom: \"10px\"}}> Total Duration: <span> {content.runtime}min </span></h3>\r\n      <h3 style={{textTransform: \"Capitalize\", paddingBottom: \"10px\"}}> Release Date: <span> {content.release_date} </span></h3>\r\n      <h3> Genre</h3>\r\n      {content.genres && content.genres.map((c)=>(\r\n        <li style={{float: \"left\" ,listStyle: \"none \", paddingRight: \"15px\",color: \"white\"}}> {c.name}</li>\r\n      ))}\r\n     \r\n    </div>\r\n    \r\n    </div>\r\n    </div>\r\n    \r\n \r\n        <div className=\"cast\">\r\n          <AliceCarousel\r\n          mouseTracking\r\n          items={items}\r\n          responsive={responsive}\r\n          controlsStrategy=\"alternate\"\r\n        autoPlay\r\n        infinite\r\n          disableButtonsControls\r\n          disableDotsControls\r\n            />\r\n  \r\n        </div>\r\n        <div>\r\n        <span className=\"similar\">Similar Movies </span>\r\n        <div className=\"trending\">\r\n        {similar  && similar.map((s) => (\r\n            <SingleContent\r\n              key={s.id}\r\n              id={s.id}\r\n              poster={s.poster_path}\r\n              title={s.title || s.name}\r\n              date={s.first_air_date || s.release_date}\r\n              media_type={\"Movie\"}\r\n              vote_average={s.vote_average}\r\n            />\r\n          ))}\r\n      </div>\r\n        </div>\r\n        \r\n\r\n        \r\n       \r\n          \r\n           \r\n        </>\r\n    )\r\n\r\n  \r\n  }\r\n  ","import axios from \"axios\";\nimport \"./Trending.css\";\nimport { useEffect, useState } from \"react\";\nimport SingleContent from \"../../components/SingleContent/SingleContent\";\nimport SeriesContent from \"../../components/SeriesContent/SeriesContent\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\nimport MoviesPlay from \"../../MoviesPlay\";\n\nconst Trending = () => {\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [series, setSeries] = useState([]);\n\n  const fetchTrendingMovies = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${process.env.REACT_APP_API_KEY}&page=${page}`\n    );\n\n    setContent(data.results);\n    //  console.log(data)\n  };\n\n  const fetchTrendingSeries = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/tv/day?api_key=${process.env.REACT_APP_API_KEY}&page=${page}`\n    );\n\n    setSeries(data.results);\n    //  console.log(data)\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchTrendingMovies();\n    fetchTrendingSeries();\n    setTimeout(() => {\n      console.clear();\n    }, 3000);\n    // eslint-disable-next-line\n  }, [page]);\n \n\n  return (\n    <div >\n      <span className=\"pageTitle\">Trending Movies</span>\n      <div className=\"trending\">\n        {content &&\n          content.map((c) => (\n            \n            <SingleContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type={c.media_type===\"movie\"? \"Movies\":\"Series\"}\n              vote_average={c.vote_average}\n            />\n            \n          ))}\n      </div>\n      <span className=\"pageTitle1\">Trending Series</span>\n      <div className=\"trending\">\n        {series &&\n          series.map((c) => (\n            \n            <SeriesContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type={c.media_type===\"movie\"? \"Movies\":\"Series\"}\n              vote_average={c.vote_average}\n            />\n            \n          ))}\n      </div>\n      <CustomPagination setPage={setPage} />\n    </div>\n  );\n};\n\nexport default Trending;\n","import {\n  Button,\n  createMuiTheme,\n  Tab,\n  Tabs,\n  TextField,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport \"./Search.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport CustomPagination from \"../../components/Pagination/CustomPagination\";\nimport SingleContent from \"../../components/SingleContent/SingleContent\";\nimport SeriesContent from \"../../components/SeriesContent/SeriesContent\";\n\n\nconst Search = () => {\n  const [type, setType] = useState(0);\n  const [searchText, setSearchText] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [numOfPages, setNumOfPages] = useState();\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: \"dark\",\n      primary: {\n        main: \"#fff\",\n      },\n    },\n  });\n\n  const fetchSearch = async () => {\n    try {\n      const { data } = await axios.get(\n        `https://api.themoviedb.org/3/search/${type ? \"tv\" : \"movie\"}?api_key=${\n          process.env.REACT_APP_API_KEY\n        }&language=en-US&query=${searchText}&page=${page}&include_adult=false`\n      );\n      setContent(data.results);\n      setNumOfPages(data.total_pages);\n      // console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchSearchSeries = async () => {\n    try {\n      const { data } = await axios.get(\n        `https://api.themoviedb.org/3/search/ tv?api_key=${\n          process.env.REACT_APP_API_KEY\n        }&language=en-US&query=${searchText}&page=${page}&include_adult=false`\n      );\n      setSeries(data.results);\n      setNumOfPages(data.total_pages);\n       console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchSearch();\n    setTimeout(() => {\n      console.clear();\n    }, 3000);\n    \n    // eslint-disable-next-line\n  }, [type, page]);\n\n  return (\n    <div>\n      <ThemeProvider theme={darkTheme}>\n        <div className=\"search\">\n          <TextField\n            style={{ flex: 1 }}\n            className=\"searchBox\"\n            label=\"Search\"\n            variant=\"filled\"\n            onChange={(e) => setSearchText(e.target.value)}\n          />\n          <Button\n            onClick={fetchSearch}\n            variant=\"contained\"\n            style={{ marginLeft: 10 }}\n          >\n            <SearchIcon fontSize=\"large\" />\n          </Button>\n        </div>\n        <Tabs\n          value={type}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={(event, newValue) => {\n            setType(newValue);\n            setPage(1);\n          }}\n          style={{ paddingBottom: 5 }}\n          aria-label=\"disabled tabs example\"\n        >\n          <Tab style={{ width: \"100%\" }} label=\"Search Movies\" />\n          <Tab style={{ width: \"100%\" }} label=\"Search TV Series\" />\n        </Tabs>\n      </ThemeProvider>\n      <div className=\"trending\">\n      {type== 0 ? \n         content && \n          content.map((c) => (\n            <SingleContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type={type ? \"tv\" : \"movie\"}\n              vote_average={c.vote_average}\n            />\n          )) :  content &&\n          content.map((c) => (\n            \n            <SeriesContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type={c.media_type===\"movie\"? \"Movies\":\"Series\"}\n              vote_average={c.vote_average}\n            />\n            \n          )) }\n     \n        {searchText &&\n          !content &&\n          (type ? <h2>No Series Found</h2> : <h2>No Movies Found</h2>)}\n      </div>\n      {numOfPages > 1 && (\n        <CustomPagination setPage={setPage} numOfPages={numOfPages} />\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","import { useParams } from \"react-router\"\r\nimport \"./SeriesPlay.css\"\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { IMAGE_BASE_URL,BACKDROP_SIZE,POSTER_SIZE,img_300,noPicture } from \"./config/config\";\r\nimport MovieThumb from \"./components/MovieThumb/MovieThumb\";\r\nimport Episode from \"./Pages/Series/Episode\";\r\nimport SingleContent from \"./components/SingleContent/SingleContent\"\r\nimport AliceCarousel from \"react-alice-carousel\";\r\nimport \"react-alice-carousel/lib/alice-carousel.css\";\r\n\r\n\r\n\r\nconst SeriesPlay = () =>{\r\n    \r\n    const [content, setContent] = useState({});\r\n    const [credits, setCredits] = useState([]);\r\n\r\n    const [data, setData] = useState({});\r\n    const [num, setNum] = useState({});\r\n    const {title ,id,id2} = useParams();\r\n    const [seasons, setSeasons] = useState(1);\r\n    const [episode, setEpisode] = useState(1);\r\n    const [similar, setSimilar] = useState([]);\r\n\r\n\r\n\r\n    const fetchData = async () => {\r\n        const { data } = await axios.get(\r\n          `https://api.themoviedb.org/3/tv/${id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=season/1`\r\n        );\r\n     \r\n    \r\n        setContent(data);\r\n        //  console.log(data);\r\n      \r\n      };\r\n      const fetchDatas = async () => {\r\n        const { data } = await axios.get(\r\n          `\r\n          https://api.themoviedb.org/3/tv/${id}/season/${seasons}?api_key=26ba5e77849587dbd7df199727859189`\r\n        );\r\n     \r\n    \r\n        setData(data);\r\n        // console.log(data);\r\n      \r\n      };\r\n      const fetchSimilar = async () => {\r\n        const { data } = await axios.get(\r\n          `https://api.themoviedb.org/3/tv/${id}/similar?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n        );\r\n    \r\n          setSimilar(data.results);\r\n          // console.log(data);\r\n      \r\n      };\r\n      const fetchCredits = async () => {\r\n        const { data } = await axios.get(\r\n          `https://api.themoviedb.org/3/tv/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`\r\n        );\r\n        setCredits(data.cast);\r\n        //  console.log(data)\r\n      };\r\n\r\n      const items = credits.map((c) => (\r\n        <div className=\"carousel\">\r\n          <img\r\n            src={c.profile_path ? `${img_300}/${c.profile_path}` : noPicture}\r\n            alt={c?.name}\r\n            className=\"carouselItem__img\"\r\n          />\r\n          <p className=\"carouselItem__name\">{c?.name}</p>\r\n        </div>\r\n      ));\r\n\r\n      useEffect(() => {\r\n        fetchData();\r\n        fetchDatas();\r\n        window.scroll(0, 0);\r\n        fetchSimilar();\r\n        fetchCredits();\r\n        setTimeout(() => {\r\n          console.clear();\r\n        }, 3000);\r\n        // console.log(\"effect\");\r\n     \r\n      }, [seasons,num]);\r\n      const responsive = {\r\n        0: { items: 3 },\r\n        568: { items: 4 },\r\n        1024: { items: 8 },\r\n    };\r\n\r\n     \r\n    return (\r\n        <>\r\n            \r\n            {/* {<div className=\"player\">\r\n           <iframe class=\"iframe-embed\" width=\"100%\" height=\"700\" scrolling=\"no\" frameborder=\"0\"\r\n  src={\"https://www.2embed.ru/embed/tmdb/tv?id=\"+id+ \"&s=\"+ seasons +\"&e=\"+ episode}\r\n  allowFullScreen=\"true\" webkitallowfullscreen=\"true\"\r\n  mozallowfullscreen=\"true\"></iframe>\r\n    \r\n           </div> } */}\r\n  \r\n                    <div class=\"watching_player-area\" data-base-url=\"https://www.2embed.ru/embed/tmdb\"\r\n                         data-tmdb-id={id}\r\n                         id=\"watch-iframe\">\r\n                        \r\n                            <iframe id=\"iframe-embed\" width=\"100%\" height=\"800\" scrolling=\"no\" frameborder=\"0\"\r\n                                    src={\"https://www.2embed.ru/embed/tmdb/tv?id=\"+id+ \"&s=\"+ seasons +\"&e=\"+ episode}\r\n                                    allowFullScreen=\"true\" webkitallowfullscreen=\"true\"\r\n                                    mozallowfullscreen=\"true\"></iframe>\r\n                        \r\n                    </div>\r\n                \r\n{/* <iframe src=\"https://streamtape.to/e/meMOBaYO0RcbbLD/\" width=\"100%\" height=\"490\" allowfullscreen allowtransparency allow=\"autoplay\" scrolling=\"no\" frameborder=\"0\"></iframe> */}\r\n           \r\n           \r\n           {/* { data.episodes && data.episodes.map((e)=>(\r\n             <button key={e.episode_number} onClick={() => setEpisode(e.episode_number)} >{e.name}</button>\r\n           ))} */}\r\n         \r\n        <div className=\"lists\">\r\n           <h1 style={{color:\"green\"}}>Seasons</h1>\r\n        { (content.seasons  ) && content.seasons.map((s,i)=>(\r\n          <>\r\n          {i!=0 ? <p className=\"seasons\" style={{display: \"inline-flex\", cursor: \"pointer\" ,padding:\"10px\",}} key={s.season_number} onClick={() => {setSeasons(s.season_number)\r\n           setEpisode(1)}} >{s.name} - {s.air_date && s.air_date.split(\"-\")[0]}</p>: \" \" }\r\n           </>\r\n            \r\n        )) }\r\n\r\n        \r\n      \r\n        <h1 style={{color:\"green\"}}>Episodes</h1>\r\n        { data.episodes && data.episodes.map((e)=>(\r\n             <p className=\"list episodes\" style={{ cursor: \"pointer\",}} key={e.episode_number} onClick={() => setEpisode(e.episode_number)} ><span style={{color : \"white\"}}>{e.episode_number}</span>.{e.name}</p>\r\n           ))}\r\n\r\n        </div>\r\n        \r\n\r\n           <div className=\"rmdb-movieinfo\"\r\n      style={{\r\n        background: content.backdrop_path ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${content.backdrop_path}')` : '#000'\r\n      }}\r\n      >\r\n        <div className=\"rmdb-movieinfo-content\">\r\n        <div className=\"rmdb-movieinfo-thumb\">\r\n        <MovieThumb\r\n           image={content.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${content.poster_path}` : './images/no_image.jpg'}\r\n           clickable={false}\r\n           />\r\n        </div>\r\n        <div className=\"rmdb-movieinfo-text\">\r\n        <h1 style={{color: \"indianred\"}}>{content.name}</h1>\r\n        <h3 style={{color: \"lightskyblue\"}}>PLOT</h3>\r\n        <p style={{color: \"honeydew\"}}>{content.overview}</p>\r\n        <h3 style={{color: \"lightskyblue\"}}>IMDB RATING</h3>\r\n        <div className=\"rmdb-rating\">\r\n            <meter min=\"0\" max=\"100\" optimum=\"100\" low=\"40\" high=\"70\" value={content.vote_average * 10}></meter>\r\n        <p className=\"rmdb-score\">{content.vote_average}</p>\r\n      </div>\r\n      <h3 style={{textTransform: \"uppercase\", paddingBottom: \"10px\",color: \"lightskyblue\"}}> Total Duration: <span style={{color: \"honeydew\"}}> {content.episode_run_time}min </span></h3>\r\n      <h2 style={{color: \"lightskyblue\"}}> Genre</h2>\r\n      {content.genres && content.genres.map((c)=>(\r\n        <li style={{float: \"left\" ,listStyle: \"none \", paddingRight: \"15px\",color: \"green\"}}> {c.name}</li>\r\n      ))}\r\n     \r\n        {/* {content.seasons && content.seasons.map((c)=>(\r\n          <li> {c.episode_count}</li>\r\n        ))} */}\r\n\r\n        </div>\r\n       \r\n        \r\n    \r\n      \r\n\r\n    </div>\r\n   \r\n    \r\n    </div>\r\n    <div className=\"cast\">\r\n          <AliceCarousel\r\n          mouseTracking\r\n          items={items}\r\n          responsive={responsive}\r\n          controlsStrategy=\"alternate\"\r\n        autoPlay\r\n        infinite\r\n          disableButtonsControls\r\n          disableDotsControls\r\n            />\r\n  \r\n        </div>\r\n         <span className=\"similar\">Similar Series </span>\r\n        <div className=\"trending\">\r\n        {similar  && similar.map((s) => (\r\n            <SingleContent\r\n              key={s.id}\r\n              id={s.id}\r\n              poster={s.poster_path}\r\n              title={s.title || s.name}\r\n              date={s.first_air_date || s.release_date}\r\n              media_type={s.media_type===\"movie\"? \"Movies\":\"Series\"}\r\n              vote_average={s.vote_average}\r\n            />\r\n          ))}\r\n      </div>\r\n   \r\n    \r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\nexport default SeriesPlay;","import axios from \"axios\";\r\n\r\nconst Tv = () =>{\r\n    let TMDB = require('tmdb-tv')(\"26ba5e77849587dbd7df199727859189\");\r\n    const fetchTrendingSeries = async () => {\r\n        const { data } = await axios.get(TMDB.Search(\"Lucifer\")\r\n        );\r\n    \r\n        // setSeries(data.results);\r\n         console.log(data)\r\n      };\r\n\r\n//     var results = await axios.get();\r\n// //  results returns an array of shows.\r\n// console.log(results);\r\n\r\n// var Show = TMDB.Show(results[0].id);\r\n// var show = await Show.GetDetails();\r\n// console.log(show);\r\n// show.seasons.forEach(async(season_no) => {\r\n//     var Season = Show.Season(season_no);\r\n//     var season = await Season.GetDetails();\r\n//     console.log(season);\r\n//     season.episodes.forEach(async(episode_no) => {\r\n//         var Episode = Season.Episode(episode_no);\r\n//         var episode = await Episode.GetDetails();\r\n//         console.log(episode);\r\n//     });\r\n// });\r\n\r\n    return(\r\n        <>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Tv;","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport SimpleBottomNavigation from \"./components/MainNav\";\nimport Movies from \"./Pages/Movies/Movies\";\nimport Series from \"./Pages/Series/Series\";\nimport Trending from \"./Pages/Trending/Trending\";\nimport Search from \"./Pages/Search/Search\";\nimport MoviesPlay from \"./MoviesPlay\";\nimport SeriesPlay from \"./SeriesPlay\";\nimport Tv from \"./Tv\";\nimport { Place } from \"@material-ui/icons\";\nimport Play from \"./Play\"\n// import { Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <div className=\"app\">\n        \n          <Switch>\n            <Route path=\"/\" component={Trending} exact />\n            <Route exact path=\"/movies/:title/:id\" component={MoviesPlay} />\n            <Route path=\"/movies\" component={Movies} />\n            <Route exact path=\"/series/:title/:id\" component={SeriesPlay} />\n            <Route path=\"/series\" component={Series} />\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/tv\" component={Tv}/>\n            {/* <Route path= \"/Play\" component={Play} /> */}\n           \n          </Switch>\n      \n      </div>\n      \n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}